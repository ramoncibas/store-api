import { Request, Response, NextFunction } from 'express';
import { AppError } from '../builders/errors';
import { ResponseBuilder } from '../builders/response';

export class ErrorHandler extends AppError {

  /**
   * Main error handling function.
   * This method is responsible for capturing errors, formatting them in a standardized way, and returning an appropriate response.
   * The error handling is divided into three cases:
   * 1. Errors generated by the application (instances of AppError).
   * 2. Unexpected or unknown errors.
   * 3. Errors that occur within the error middleware itself (critical error).
   * 
   * @param error - The error that occurred (could be an instance of AppError or an unknown error).
   * @param req - The Express request object.
   * @param res - The Express response object.
   * @param _next - The next middleware (not used here, but required in Express).
   */
  public static handle = (
    error: Error | AppError,
    req: Request,
    res: Response,
    _next: NextFunction
  ): void => {
    try {
      if (error instanceof AppError) {
        return ResponseBuilder.send({
          response: res,
          message: error.getErrorMessage() ?? error.message,
          type: 'error',
          statusCode: error.getErrorCode(),
          data: error.getErrorData()
        });
      }

      const unexpectedError = new AppError(
        'Internal server error',
        500,
        error,
        process.env.NODE_ENV === 'development'
          ? { stack: error.stack }
          : undefined
      );

      return ResponseBuilder.send({
        response: res,
        message: unexpectedError.message,
        type: 'error',
        statusCode: 500,
        data: unexpectedError.getErrorData()
      });

    } catch (criticalError) {
      console.error('Critical error in ErrorHandler:', criticalError);

      return ResponseBuilder.send({
        response: res,
        message: 'Critical server error',
        statusCode: 500,
        type: 'error',
        data: process.env.NODE_ENV === 'development'
          ? { error: criticalError }
          : undefined
      });
    }
  };
}

export default ErrorHandler.handle;
